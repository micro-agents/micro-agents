/*******************************************************************************
 * µ² - Micro-Agent Platform, core of the Otago Agent Platform (OPAL),
 * developed at the Information Science Department, 
 * University of Otago, Dunedin, New Zealand.
 * 
 * This file is part of the aforementioned software.
 * 
 * µ² is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 * µ² is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with the Micro-Agents Framework.  If not, see <http://www.gnu.org/licenses/>.
 ******************************************************************************/
package org.nzdis.micro;

/**
 * Default System-wide AgentLoader.
 * 
 *<br><br>
 * SystemAgentLoader.java<br>
 * Created: Thu Mar 15 14:44:00 2001<br>
 *
 * @author <a href="mariusz@rakiura.org">Mariusz Nowostawski</a> (Original author)
 * @author <a href="cfrantz@infoscience.otago.ac.nz">Christopher Frantz</a> (Revision author)
 * @version $Revision: 2.0 $ $Date: 2013/04/08 00:00:00 $
 */
public final class SystemAgentLoader {

  private final static AbstractAgent systemOwner = SystemOwner.getInstance();
  private final static AgentLoader loader = systemOwner.getGroup().getAgentLoader();

  private SystemAgentLoader() {}

  /**
   * Instantiate an Agent for a given Role. This method will create an
   * Agent object with the given role capability. 
   * @param role Role implementation to be played by the instantiated
   * agent
   * @return AgentController to manage created agent
   */
  public final static AgentController newAgent(Role role) {
    return loader.newAgent(role);
  }

  /**
   * Variant for {@link newAgent()} with option to provide agent name.
   * @param role Role implementation to be played by the instantiated
   * agent
   * @param name Name for created agent
   * @return AgentController to manage created agent
   */
  public final static AgentController newAgent(Role role, String name) {
    return loader.newAgent(role, name);
  }
  
  /**
   * Variant of {@link newAgent()} with played role, agent name and option to use
   * passed name only as prefix for actual agent name (suffix determined
   * by platform).
   * @param role Role to be initialized on newly created agent
   * @param name Name for created agent
   * @param useNameAsPrefix Indicator if name should only be used as prefix for actual name (generated by platform)
   * @return AgentController to manage created agent
   */
  public final static AgentController newAgent(Role role, String name, boolean useNameAsPrefix) {
	    return loader.newAgent(role, name, useNameAsPrefix);
	  }
  
  /**
   * Variant of {@link newAgent()} with played role, agent name and option to use
   * passed name only as prefix for actual agent name (suffix determined
   * by platform). Additionally the name of a Clojure script holding the
   * agent implementation can be passed.
   * @param role Role to be initialized on newly created agent
   * @param name Name for created agent
   * @param useNameAsPrefix Indicator if name should only be used as prefix for actual name (generated by platform)
   * @param cljScript Clojure script to be loaded for agent
   * @return AgentController to manage created agent
   */
  public final static AgentController newAgent(Role role, String name, boolean useNameAsPrefix, String cljScript) {
	    return loader.newAgent(role, name, useNameAsPrefix, cljScript);
	  }
  
  /**
   * Variant of {@link newAgent()} with played role and agent name. Additionally the name 
   * of a Clojure script holding the agent implementation can be passed.
   * @param role Role to be initialized on newly created agent
   * @param name Name for created agent
   * @param cljScript Clojure script to be loaded for agent
   * @return AgentController to manage created agent
   */
  public final static AgentController newAgent(Role role, String name, String cljScript) {
	return loader.newAgent(role, name, cljScript);
  }
  
  /**
   * Instantiates an Agent for given Roles. This method will create an
   * Agent object with the given roles capability. 
   * @param roles Roles array  implementation, all roles o be played by
   * the instantiated agent
   * @return AgentController to manage created agent
   */
  public final static AgentController newAgent(Role[] roles) {
	  return loader.newAgent(roles);
  }
  
  /**
   * Instantiates an Agent for given Roles. This method will create an
   * Agent object with the given roles capability. Additionally an agent
   * name can be specified.
   * @param aRoleArray Array of roles assigned to newly created agent
   * @param name Name for created agent
   * @return AgentController to manage created agent
   */
  public final static AgentController newAgent(final Role[] aRoleArray, String name){
	  return loader.newAgent(aRoleArray, name);
  }
  
  /**
   * Instantiates an agent for the given roles on SystemOwner level. An
   * agent name can be passed. If indicated, the agent name will only be
   * prefix of the actual name which is determined by the platform at runtime.
   * A reference to the Clojure script for an agent implementation can be provided.
   * @param aRoleArray Array of roles assigned to newly created agent
   * @param name Name for created agent
   * @param useNameAsPrefix Indicator if name is only to be used as prefix which is completed by platform
   * @param cljScript Clojure script to be loaded with agent instance
   * @return AgentController to manage created agent
   */
  public final static AgentController newAgent(final Role[] aRoleArray, String name, boolean useNameAsPrefix, String cljScript){
	  return loader.newAgent(aRoleArray, name, useNameAsPrefix, cljScript);
  }
  
  /**
   * Instantiates an agent for the given roles on SystemOwner level. An
   * agent name can be passed.
   * A reference to the Clojure script for an agent implementation can be provided.
   * @param aRoleArray Array of roles to be assigned to newly created agent
   * @param name Name for created agent
   * @param cljScript Clojure script used for implementation
   * @return
   */
  public final static AgentController newAgent(final Role[] aRoleArray, String name, String cljScript){
	  return loader.newAgent(aRoleArray, name, false, cljScript);
  }
  
  /**
   * Instantiate an Agent for a given Agent class. This method will create an
   * Agent instance directly via the default agent constructor. Note,
   * that the user defined agent implementation does not need to
   * implement AgentController; it is up to the programmer to decided
   * the most efficient mechanism for agent controlling. 
   * @param agentclass Class of the agent to be instantiated
   * @return newly created agent instance or null if the agent cannot
   * be instantiated
   */
  public final static Agent newAgent(Class agentclass) {
    return loader.newAgent(agentclass);
  }

  /**
   * Registers an instantiated agent with the platform, in the SystemOwner group.
   * @param anAgent
   * @return
   */
  public final static Agent newAgent(final Agent anAgent){
	  return loader.newAgent(anAgent);
  }
   
  /** 
   * Finds all working roles for a given role type along the 
   * entire agent hierarchy.
   * @param roleType Class of the role to be found.
   * @return Array of roles which are of the exact type or subtypes of
   * a specified role type
   */
  public final static Role[] findRoles(Class roleType){
	  return loader.findRoles(roleType, false);
  }
  
  /**
   * Finds all working roles for a given intent type along the 
   * entire agent hierarchy.
   * @param intentType Class of the intent type to be looked up.
   * @return Array of roles that can satisfy the given intent.
   */
  public final static Role[] findRolesByIntent(Class intentType){
	  return loader.findRolesByIntent(intentType, false);
  }
  
  /**
   * Finds all working agents for a given role type along the 
   * entire agent hierarchy.
   * @param roleType Class of the role type to be looked up.
   * @return Array of agents that play a given role type.
   */
  public final static Agent[] findAgentsByRole(Class roleType){
	  return loader.findAgentsByRoles(roleType, false);
  }
  
  /**
   * Finds all working agents' names for a given role type along the 
   * entire agent hierarchy.
   * @param roleType Class of the role type to be looked up.
   * @return Array of agent names that play a given role type.
   */
  public final static String[] findAgentNamesByRole(Class roleType){
	  return loader.findAgentNamesByRoles(roleType, false);
  }
  
  /** 
   * Finds all existing Agents for a given intent type along
   * the entire agent hierarchy.
   * @param intentType Intent type Class for the intents to be found
   * @return Array of Agents providing roles for a specified intent
   * type 
   */
  public final static Agent[] findAgentsByIntent(Class intentType){
	  return loader.findAgentsByIntent(intentType, false);
  }
  
  /**
   * Finds a registered agent by agent name.
   * @param agentName Agent name to look up
   * @return Agent instance associated with name
   */
  public final static Agent findAgent(String agentName){
	  return loader.findAgent(agentName);
  }
  
  /**
   * Returns all registered agents on the top level.
   * @return
   */
  public final static Agent[] getAgents(){
	  return loader.getAgents();
  }
  
  /**
   * Returns all agents registered with the entire agent hierarchy.
   * @return
   */
  public final static Agent[] getAgentsRecursive(){
	  return loader.getAgentsRecursive();
  }
  
  /**
   * Shuts down the platform.
   */
  public final static void shutdownPlatform(){
	  MTConnector.shutdown();
  }
  
  /**
   * Indicates if the platform is initialized and running.
   * @return
   */
  public final static boolean platformInitialized(){
	  return MTConnector.platformInitialized();
  }

}
